package pl.edu.agh.kis.client;

import java.io.UnsupportedEncodingException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyManagementException;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.util.List;
import java.util.Scanner;

import javax.net.ssl.SSLContext;

import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.conn.ssl.SSLContexts;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import pl.edu.agh.kis.exceptions.AuthorizationRequiredException;
import pl.edu.agh.kis.exceptions.InvalidLoginOrPassword;
import pl.edu.agh.kis.exceptions.InvalidParameterException;
import pl.edu.agh.kis.exceptions.NotPermittedCharactersException;
import pl.edu.agh.kis.exceptions.PathDoesNotExistsException;
import pl.edu.agh.kis.exceptions.ServerException;
import pl.edu.agh.kis.exceptions.UnknownCodeException;
import pl.edu.agh.kis.exceptions.UnsuccessfulLoginException;
import pl.edu.agh.kis.model.Data;
import pl.edu.agh.kis.model.File;
import pl.edu.agh.kis.model.Folder;
import pl.edu.agh.kis.model.User;
import pl.edu.agh.kis.exceptions.AlreadyExistsException;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'daniel' at '1/24/17 9:23 PM' with Gradle 2.10
 *
 * @author daniel, @date 1/24/17 9:23 PM
 */
public class ClientApp {
	public static void main(String[] args) {

		// try {
		// new ClientApp().startNew();
		// } catch (KeyManagementException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (NoSuchAlgorithmException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (KeyStoreException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (UnsupportedEncodingException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (ServerException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (UnirestException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }

		try {
			new ClientApp().start();
		} catch (UnknownCodeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnirestException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnsuccessfulLoginException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AlreadyExistsException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NotPermittedCharactersException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyStoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AuthorizationRequiredException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (PathDoesNotExistsException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvalidLoginOrPassword e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

//	private void startNew() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException,
//			UnsupportedEncodingException, ServerException, UnirestException {
//		provideSSLConnection();
//		DataLogic dataLogic = new FileLogic();
//		Path p = Paths.get("khgi");
//		dataLogic.getMetadata("/root/name1/file");
//
//	}

	private void start()
			throws UnknownCodeException, UnirestException, AlreadyExistsException, NotPermittedCharactersException,
			UnsuccessfulLoginException, InvalidParameterException, KeyManagementException, NoSuchAlgorithmException,
			KeyStoreException, AuthorizationRequiredException, PathDoesNotExistsException, InvalidLoginOrPassword {
		ClientLogic logic = new ClientLogic();

		provideSSLConnection();
		Scanner sc = new Scanner(System.in);
		String sessionId = null;

		showOptions();// Optional folder meta data

		while (sc.hasNextLine()) {
			String[] cmdParts = sc.nextLine().toLowerCase().split(" ");
			String cmd = cmdParts[0];
			if (cmd.equals("stop")) {
				logic.stopServer();
				break;
			} else if (cmd.equals("createuser")) {
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				User newUser = logic.createUser(cmdParts[1], cmdParts[2]);
				System.out.println("created: " + newUser);

			} else if (cmd.equals("login")) {
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				sessionId = logic.logIn(cmdParts[1], cmdParts[2]);
				System.out.println("logged in. session: " + sessionId);

			} else if (cmd.equals("createfolder")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 1) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				Folder f = logic.createFolder(cmdParts[1], sessionId);
				System.out.println("created: " + f);

			} else if (cmd.equals("getmetadata")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 1) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				DataLogic dataLogic = new FolderLogic(sessionId);
				Path p = Paths.get(cmdParts[1]);
				try {
					Data f = dataLogic.getMetadata(p);
					System.out.println(f);
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				} catch (ServerException e) {
					e.printStackTrace();
					System.out.println("Serwer Exception: " + e.getClass());
				}

			} else if (cmd.equals("renamefolder")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				Folder f = logic.renameFolder(cmdParts[1], cmdParts[2], sessionId);
				System.out.println("renamed: " + f);

			} else if (cmd.equals("deletefolder")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 1) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				logic.deleteFolder(cmdParts[1], sessionId);
				System.out.println("deleted");

			} else if (cmd.equals("list")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
					continue;
				}
				boolean recursive = false;
				if (cmdParts[2].equals("true")) {
					recursive = true;
				}
				List<Object> objectList = logic.listFolderContent(cmdParts[1], recursive, sessionId);
				for (Object o : objectList) {
					System.out.println("- " + o);
				}

			} else if (cmd.equals("movefolder")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
				}
				Folder f = logic.moveFolder(cmdParts[1], cmdParts[2], sessionId);
				System.out.println("moved: " + f);

			} else if (cmd.equals("upload")) {

				if (sessionId == null) {
					System.out.println("You are not logged in.");
					continue;
				}
				if (cmdParts.length <= 2) {
					System.out.println("Invalid number of arguments.");
				}
				File f = logic.uploadFile(cmdParts[1], cmdParts[2], sessionId);
				System.out.println("uploaded: " + f);

			}
			showOptions();

		}
		sc.close();

	}

	private void showOptions() {
		System.out.println();
		System.out.println("----------------------------------");
		System.out.println("stop()");
		System.out.println("createUser(name, pass)");
		System.out.println("logIn(name, pass)");
		System.out.println("createFolder(path)");
		System.out.println("getMetadata(path)");
		System.out.println("renameFolder(path, newName)");
		System.out.println("deleteFolder(path)");
		System.out.println("list(path, recursive)");
		System.out.println("moveFolder(oldPath, newPath)");
		System.out.println("upload(content, path)");
		System.out.println("----------------------------------");
		System.out.println();
	}

	private void provideSSLConnection() throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException {

		SSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(null, new TrustSelfSignedStrategy()).build();
		SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext,
				SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
		CloseableHttpClient httpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();
		Unirest.setHttpClient(httpclient);
	}

}
